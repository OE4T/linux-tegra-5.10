/*
 * Copyright (c) 2014-2020, NVIDIA CORPORATION.  All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef NVGPU_BIOS_H
#define NVGPU_BIOS_H

#include <nvgpu/types.h>
#include <nvgpu/utils.h>

struct gk20a;

#define PERF_PTRS_WIDTH		U8(0x4)
#define PERF_PTRS_WIDTH_16	U8(0x2)

enum {
	NVGPU_BIOS_CLOCK_TOKEN = 0,
	NVGPU_BIOS_PERF_TOKEN,
	NVGPU_BIOS_VIRT_TOKEN
};

enum {
	CLOCKS_TABLE = 2,
	CLOCK_PROGRAMMING_TABLE,
	FLL_TABLE,
	VIN_TABLE,
	FREQUENCY_CONTROLLER_TABLE
};

enum {
	PERFORMANCE_TABLE = 0,
	MEMORY_CLOCK_TABLE,
	MEMORY_TWEAK_TABLE,
	POWER_CONTROL_TABLE,
	THERMAL_CONTROL_TABLE,
	THERMAL_DEVICE_TABLE,
	THERMAL_COOLERS_TABLE,
	PERFORMANCE_SETTINGS_SCRIPT,
	CONTINUOUS_VIRTUAL_BINNING_TABLE,
	POWER_SENSORS_TABLE = 0xA,
	POWER_CAPPING_TABLE = 0xB,
	POWER_TOPOLOGY_TABLE = 0xF,
	THERMAL_CHANNEL_TABLE = 0x12,
	VOLTAGE_RAIL_TABLE = 26,
	VOLTAGE_DEVICE_TABLE,
	VOLTAGE_POLICY_TABLE,
	LOWPOWER_TABLE,
	LOWPOWER_GR_TABLE = 32,
	LOWPOWER_MS_TABLE = 33,
};

enum {
	VP_FIELD_TABLE = 0,
	VP_FIELD_REGISTER,
	VP_TRANSLATION_TABLE,
};

struct bit_token {
	u8 token_id;
	u8 data_version;
	u16 data_size;
	u16 data_ptr;
} __attribute__((packed));

/*
 * BIOS_GET_FIELD returns the value of a given field 'name' of the param 'value'
 * from VBIOS tables adjusted to the required 'type'.
 */
#define BIOS_GET_FIELD(type, value, name)				({\
	typeof(value) x = ((value) & (name##_MASK)) >> (name##_SHIFT);	\
	(type)x;							\
})

struct fll_descriptor_header {
	u8 version;
	u8 size;
} __attribute__((packed));

#define FLL_DESCRIPTOR_HEADER_10_SIZE_6     6U
#define FLL_DESCRIPTOR_HEADER_10_SIZE_7     7U

struct fll_descriptor_header_10 {
	u8 version;
	u8 header_size;
	u8 entry_size;
	u8 entry_count;
	u16 max_min_freq_mhz;
	u8 freq_margin_vfe_idx;
} __attribute__((packed));

#define FLL_DESCRIPTOR_ENTRY_10_SIZE     15U

struct fll_descriptor_entry_10 {
	u8 fll_device_type;
	u8 clk_domain;
	u8 fll_device_id;
	u16 lut_params;
	u8 vin_idx_logic;
	u8 vin_idx_sram;
	u16 fll_params;
	u8 min_freq_vfe_idx;
	u8 freq_ctrl_idx;
	u16 ref_freq_mhz;
	u16 ffr_cutoff_freq_mhz;
} __attribute__((packed));

#define NV_FLL_DESC_FLL_PARAMS_MDIV_MASK 0x1FU
#define NV_FLL_DESC_FLL_PARAMS_MDIV_SHIFT 0U

#define NV_FLL_DESC_FLL_PARAMS_SKIP_PLDIV_BELOW_DVCO_MIN_MASK 0x20U
#define NV_FLL_DESC_FLL_PARAMS_SKIP_PLDIV_BELOW_DVCO_MIN_SHIFT 5U

#define NV_FLL_DESC_LUT_PARAMS_VSELECT_MASK 0x3U
#define NV_FLL_DESC_LUT_PARAMS_VSELECT_SHIFT 0U

#define NV_FLL_DESC_LUT_PARAMS_HYSTERISIS_THRESHOLD_MASK 0x3CU
#define NV_FLL_DESC_LUT_PARAMS_HYSTERISIS_THRESHOLD_SHIFT 2U

struct vin_descriptor_header_10 {
	u8 version;
	u8 header_sizee;
	u8 entry_size;
	u8 entry_count;
	u8 flags0;
	u32 vin_cal;
} __attribute__((packed));

struct vin_descriptor_entry_10 {
	u8 vin_device_type;
	u8 volt_domain_vbios;
	u8 vin_device_id;
} __attribute__((packed));

#define NV_VIN_DESC_FLAGS0_VIN_CAL_REVISION_MASK 0x7U
#define NV_VIN_DESC_FLAGS0_VIN_CAL_REVISION_SHIFT 0U

#define NV_VIN_DESC_FLAGS0_VIN_CAL_TYPE_MASK 0xF0U
#define NV_VIN_DESC_FLAGS0_VIN_CAL_TYPE_SHIFT 4U

#define NV_VIN_DESC_FLAGS0_DISABLE_CONTROL_MASK 0x8U
#define NV_VIN_DESC_FLAGS0_DISABLE_CONTROL_SHIFT 3U

#define NV_VIN_DESC_VIN_CAL_SLOPE_FRACTION_MASK 0x1FFU
#define NV_VIN_DESC_VIN_CAL_SLOPE_FRACTION_SHIFT 0U

#define NV_VIN_DESC_VIN_CAL_SLOPE_INTEGER_MASK 0x3C00U
#define NV_VIN_DESC_VIN_CAL_SLOPE_INTEGER_SHIFT  10U

#define NV_VIN_DESC_VIN_CAL_INTERCEPT_FRACTION_MASK 0x3C000U
#define NV_VIN_DESC_VIN_CAL_INTERCEPT_FRACTION_SHIFT 14U

#define NV_VIN_DESC_VIN_CAL_INTERCEPT_INTEGER_MASK 0xFFC0000U
#define NV_VIN_DESC_VIN_CAL_INTERCEPT_INTEGER_SHIFT 18U

#define NV_VIN_DESC_VIN_CAL_OFFSET_MASK 0x7FU
#define NV_VIN_DESC_VIN_CAL_OFFSET_SHIFT 0U

#define NV_VIN_DESC_VIN_CAL_GAIN_MASK 0xF80U
#define NV_VIN_DESC_VIN_CAL_GAIN_SHIFT 7U

#define VBIOS_CLOCKS_TABLE_35_HEADER_SIZE_09 0x09U
struct vbios_clocks_table_35_header {
	u8 version;
	u8 header_size;
	u8 entry_size;
	u8 entry_count;
	u8 clocks_hal;
	u16 cntr_sampling_periodms;
	u16 reference_window;
} __attribute__((packed));

#define VBIOS_CLOCKS_TABLE_35_ENTRY_SIZE_11                                0x0BU
struct vbios_clocks_table_35_entry {
	u8 flags0;
	u16 param0;
	u32 param1;
	u16 param2;
	u16 param3;
} __attribute__((packed));

#define NV_VBIOS_CLOCKS_TABLE_1X_ENTRY_FLAGS0_USAGE_MASK                   0x1FU
#define NV_VBIOS_CLOCKS_TABLE_1X_ENTRY_FLAGS0_USAGE_SHIFT                     0U
#define NV_VBIOS_CLOCKS_TABLE_1X_ENTRY_FLAGS0_USAGE_FIXED                  0x00U
#define NV_VBIOS_CLOCKS_TABLE_1X_ENTRY_FLAGS0_USAGE_MASTER                 0x01U
#define NV_VBIOS_CLOCKS_TABLE_1X_ENTRY_FLAGS0_USAGE_SLAVE                  0x02U

#define NV_VBIOS_CLOCKS_TABLE_1X_ENTRY_PARAM0_PROG_CLK_PROG_IDX_FIRST_MASK 0xFFU
#define NV_VBIOS_CLOCKS_TABLE_1X_ENTRY_PARAM0_PROG_CLK_PROG_IDX_FIRST_SHIFT   0U
#define NV_VBIOS_CLOCKS_TABLE_1X_ENTRY_PARAM0_PROG_CLK_PROG_IDX_LAST_MASK 0xFF00U
#define NV_VBIOS_CLOCKS_TABLE_1X_ENTRY_PARAM0_PROG_CLK_PROG_IDX_LAST_SHIFT 0x08U

#define NV_VBIOS_CLOCKS_TABLE_1X_ENTRY_PARAM1_FIXED_FREQUENCY_MHZ_MASK   0xFFFFU
#define NV_VBIOS_CLOCKS_TABLE_1X_ENTRY_PARAM1_FIXED_FREQUENCY_MHZ_SHIFT       0U
#define NV_VBIOS_CLOCKS_TABLE_1X_ENTRY_PARAM1_MASTER_FREQ_OC_DELTA_MIN_MHZ_MASK 0xFFFFU
#define NV_VBIOS_CLOCKS_TABLE_1X_ENTRY_PARAM1_MASTER_FREQ_OC_DELTA_MIN_MHZ_SHIFT 0U

#define NV_VBIOS_CLOCKS_TABLE_1X_ENTRY_PARAM1_MASTER_FREQ_OC_DELTA_MAX_MHZ_MASK 0xFFFF0000U
#define NV_VBIOS_CLOCKS_TABLE_1X_ENTRY_PARAM1_MASTER_FREQ_OC_DELTA_MAX_MHZ_SHIFT 0U

#define NV_VBIOS_CLOCKS_TABLE_1X_ENTRY_PARAM1_SLAVE_MASTER_DOMAIN_MASK      0xFU
#define NV_VBIOS_CLOCKS_TABLE_1X_ENTRY_PARAM1_SLAVE_MASTER_DOMAIN_SHIFT       0U

#define NV_VBIOS_CLOCKS_TABLE_1X_ENTRY_PARAM2_PROG_NOISE_UNAWARE_ORDERING_IDX_MASK 0xFU
#define NV_VBIOS_CLOCKS_TABLE_1X_ENTRY_PARAM2_PROG_NOISE_UNAWARE_ORDERING_IDX_SHIFT 0U

#define NV_VBIOS_CLOCKS_TABLE_1X_ENTRY_PARAM2_PROG_NOISE_AWARE_ORDERING_IDX_MASK 0xF0U
#define NV_VBIOS_CLOCKS_TABLE_1X_ENTRY_PARAM2_PROG_NOISE_AWARE_ORDERING_IDX_SHIFT 4U

#define NV_VBIOS_CLOCKS_TABLE_1X_ENTRY_PARAM2_PROG_FORCE_NOISE_UNAWARE_ORDERING_MASK 0x100U
#define NV_VBIOS_CLOCKS_TABLE_1X_ENTRY_PARAM2_PROG_FORCE_NOISE_UNAWARE_ORDERING_SHIFT 8U
#define NV_VBIOS_CLOCKS_TABLE_1X_ENTRY_PARAM2_PROG_FORCE_NOISE_UNAWARE_ORDERING_FALSE   0x00U
#define NV_VBIOS_CLOCKS_TABLE_1X_ENTRY_PARAM2_PROG_FORCE_NOISE_UNAWARE_ORDERING_TRUE    0x01U

#define NV_VBIOS_CLOCKS_TABLE_35_ENTRY_PARAM2_PROG_PRE_VOLT_ORDERING_IDX_MASK 0xFU
#define NV_VBIOS_CLOCKS_TABLE_35_ENTRY_PARAM2_PROG_PRE_VOLT_ORDERING_IDX_SHIFT 0U

#define NV_VBIOS_CLOCKS_TABLE_35_ENTRY_PARAM2_PROG_POST_VOLT_ORDERING_IDX_MASK 0xF0U
#define NV_VBIOS_CLOCKS_TABLE_35_ENTRY_PARAM2_PROG_POST_VOLT_ORDERING_IDX_SHIFT 4U

#define NV_VBIOS_CLOCKS_TABLE_35_ENTRY_PARAM3_CLK_MONITOR_THRESHOLD_MIN_MASK  0xFFU
#define NV_VBIOS_CLOCKS_TABLE_35_ENTRY_PARAM3_CLK_MONITOR_THRESHOLD_MIN_SHIFT 0U
#define NV_VBIOS_CLOCKS_TABLE_35_ENTRY_PARAM3_CLK_MONITOR_THRESHOLD_MAX_MASK  0xFF00U
#define NV_VBIOS_CLOCKS_TABLE_35_ENTRY_PARAM3_CLK_MONITOR_THRESHOLD_MAX_SHIFT 0x08U

#define VBIOS_CLOCK_PROGRAMMING_TABLE_1X_HEADER_SIZE_08                    0x08U
#define VBIOS_CLOCK_PROGRAMMING_TABLE_1X_HEADER_VERSION                    0x10U
struct vbios_clock_programming_table_1x_header {
	u8 version;
	u8 header_size;
	u8 entry_size;
	u8 entry_count;
	u8 slave_entry_size;
	u8 slave_entry_count;
	u8 vf_entry_size;
	u8 vf_entry_count;
} __attribute__((packed));

#define VBIOS_CLOCK_PROGRAMMING_TABLE_35_HEADER_SIZE_0A                    0x0AU
#define VBIOS_CLOCK_PROGRAMMING_TABLE_35_HEADER_VERSION                    0x35U
struct vbios_clock_programming_table_35_header {
	u8 version;
	u8 header_size;
	u8 entry_size;
	u8 entry_count;
	u8 slave_entry_size;
	u8 slave_entry_count;
	u8 vf_entry_size;
	u8 vf_entry_count;
	u8 vf_sec_entry_size;
	u8 vf_sec_entry_count;
} __attribute__((packed));

#define VBIOS_CLOCK_PROGRAMMING_TABLE_1X_ENTRY_SIZE_05                     0x05U
#define VBIOS_CLOCK_PROGRAMMING_TABLE_1X_ENTRY_SIZE_0D                     0x0DU
struct vbios_clock_programming_table_1x_entry {
	u8 flags0;
	u16 freq_max_mhz;
	u8 param0;
	u8 param1;
	u32 rsvd;
	u32 rsvd1;
} __attribute__((packed));

#define NV_VBIOS_CLOCK_PROGRAMMING_TABLE_1X_ENTRY_FLAGS0_TYPE_MASK         0x0FU
#define NV_VBIOS_CLOCK_PROGRAMMING_TABLE_1X_ENTRY_FLAGS0_TYPE_SHIFT        0x00U
#define NV_VBIOS_CLOCK_PROGRAMMING_TABLE_1X_ENTRY_FLAGS0_TYPE_MASTER_RATIO 0x00U
#define NV_VBIOS_CLOCK_PROGRAMMING_TABLE_1X_ENTRY_FLAGS0_TYPE_MASTER_TABLE 0x01U
#define NV_VBIOS_CLOCK_PROGRAMMING_TABLE_1X_ENTRY_FLAGS0_TYPE_SLAVE        0x02U
#define NV_VBIOS_CLOCK_PROGRAMMING_TABLE_35_ENTRY_FLAGS0_TYPE_DISABLED     0x0FU

#define NV_VBIOS_CLOCK_PROGRAMMING_TABLE_1X_ENTRY_FLAGS0_SOURCE_MASK       0x70U
#define NV_VBIOS_CLOCK_PROGRAMMING_TABLE_1X_ENTRY_FLAGS0_SOURCE_SHIFT      0x04U
#define NV_VBIOS_CLOCK_PROGRAMMING_TABLE_1X_ENTRY_FLAGS0_SOURCE_PLL        0x00U
#define NV_VBIOS_CLOCK_PROGRAMMING_TABLE_1X_ENTRY_FLAGS0_SOURCE_ONE_SOURCE 0x01U
#define NV_VBIOS_CLOCK_PROGRAMMING_TABLE_1X_ENTRY_FLAGS0_SOURCE_FLL        0x02U

#define NV_VBIOS_CLOCK_PROGRAMMING_TABLE_1X_ENTRY_FLAGS0_OVOC_ENABLED_MASK 0x80U
#define NV_VBIOS_CLOCK_PROGRAMMING_TABLE_1X_ENTRY_FLAGS0_OVOC_ENABLED_SHIFT 0x07U
#define NV_VBIOS_CLOCK_PROGRAMMING_TABLE_1X_ENTRY_FLAGS0_OVOC_ENABLED_FALSE 0x00U
#define NV_VBIOS_CLOCK_PROGRAMMING_TABLE_1X_ENTRY_FLAGS0_OVOC_ENABLED_TRUE 0x01U

#define NV_VBIOS_CLOCK_PROGRAMMING_TABLE_1X_ENTRY_PARAM0_PLL_PLL_INDEX_MASK  0xFFU
#define NV_VBIOS_CLOCK_PROGRAMMING_TABLE_1X_ENTRY_PARAM0_PLL_PLL_INDEX_SHIFT 0x00U

#define NV_VBIOS_CLOCK_PROGRAMMING_TABLE_1X_ENTRY_PARAM1_PLL_FREQ_STEP_SIZE_MASK   0xFFU
#define NV_VBIOS_CLOCK_PROGRAMMING_TABLE_1X_ENTRY_PARAM1_PLL_FREQ_STEP_SIZE_SHIFT  0x00U

#define VBIOS_CLOCK_PROGRAMMING_TABLE_1X_SLAVE_ENTRY_SIZE_03               0x03U
struct vbios_clock_programming_table_1x_slave_entry {
	u8 clk_dom_idx;
	u16 param0;
} __attribute__((packed));

#define NV_VBIOS_CLOCK_PROGRAMMING_TABLE_1X_SLAVE_ENTRY_PARAM0_MASTER_RATIO_RATIO_MASK 0xFFU
#define NV_VBIOS_CLOCK_PROGRAMMING_TABLE_1X_SLAVE_ENTRY_PARAM0_MASTER_RATIO_RATIO_SHIFT 0x00U

#define NV_VBIOS_CLOCK_PROGRAMMING_TABLE_1X_SLAVE_ENTRY_PARAM0_MASTER_TABLE_FREQ_MASK  0x3FFFU
#define NV_VBIOS_CLOCK_PROGRAMMING_TABLE_1X_SLAVE_ENTRY_PARAM0_MASTER_TABLE_FREQ_SHIFT  0x00U

#define VBIOS_CLOCK_PROGRAMMING_TABLE_1X_VF_ENTRY_SIZE_02                  0x02U
struct vbios_clock_programming_table_1x_vf_entry {
	u8 vfe_idx;
	u8 param0;
} __attribute__((packed));

#define VBIOS_CLOCK_PROGRAMMING_TABLE_35_VF_ENTRY_SIZE_01                  0x01U
struct vbios_clock_programming_table_35_vf_entry {
	u8 vfe_idx;
} __attribute__((packed));

#define VBIOS_CLOCK_PROGRAMMING_TABLE_35_VF_SEC_ENTRY_SIZE_02		   0x02U
struct vbios_clock_programming_table_35_vf_sec_entry {
	u8 sec_vfe_idx;
	u8 param0;
} __attribute__((packed));

#define NV_VBIOS_CLOCK_PROGRAMMING_TABLE_1X_VF_ENTRY_PARAM0_FLL_GAIN_VFE_IDX_MASK 0xFFU
#define NV_VBIOS_CLOCK_PROGRAMMING_TABLE_1X_VF_ENTRY_PARAM0_FLL_GAIN_VFE_IDX_SHIFT 0X00U

#define NV_VBIOS_CLOCK_PROGRAMMING_TABLE_35_SEC_VF_ENTRY_PARAM0_FLL_DVCO_OFFSET_VFE_IDX_MASK 0xFFU
#define NV_VBIOS_CLOCK_PROGRAMMING_TABLE_35_SEC_VF_ENTRY_PARAM0_FLL_DVCO_OFFSET_VFE_IDX_SHIFT 0X00U

struct vbios_vfe_3x_header_struct {
	u8 version;
	u8 header_size;
	u8 vfe_var_entry_size;
	u8 vfe_var_entry_count;
	u8 vfe_equ_entry_size;
	u8 vfe_equ_entry_count;
	u8 polling_periodms;
	u8 vfe_var_rppm_entry_count;
	u8 vfe_equ_rppm_entry_count;
} __attribute__((packed));

#define VBIOS_VFE_3X_HEADER_SIZE_09                                     0x09U

#define VBIOS_VFE_3X_VAR_ENTRY_SIZE_19                                     0x19U
struct vbios_vfe_3x_var_entry_struct {
	u8 type;
	u32 out_range_min;
	u32 out_range_max;
	u32 param0;
	u32 param1;
	u32 param2;
	u32 param3;
} __attribute__((packed));

#define VBIOS_VFE_3X_VAR_ENTRY_TYPE_DISABLED                               0x00U
#define VBIOS_VFE_3X_VAR_ENTRY_TYPE_SINGLE_FREQUENCY                       0x01U
#define VBIOS_VFE_3X_VAR_ENTRY_TYPE_SINGLE_VOLTAGE                         0x02U
#define VBIOS_VFE_3X_VAR_ENTRY_TYPE_SINGLE_SENSED_TEMP                     0x03U
#define VBIOS_VFE_3X_VAR_ENTRY_TYPE_SINGLE_SENSED_FUSE                     0x04U
#define VBIOS_VFE_3X_VAR_ENTRY_TYPE_DERIVED_PRODUCT                        0x05U
#define VBIOS_VFE_3X_VAR_ENTRY_TYPE_DERIVED_SUM                            0x06U
#define VBIOS_VFE_3X_VAR_ENTRY_TYPE_SINGLE_CALLER_SPECIFIED                0x07U

#define VBIOS_VFE_3X_VAR_ENTRY_PAR0_SFREQ_CLK_DOMAIN_IS_AVAILABLE_MASK 0x1U
#define VBIOS_VFE_3X_VAR_ENTRY_PAR0_SFREQ_CLK_DOMAIN_IS_AVAILABLE_SHIFT 0
#define VBIOS_VFE_3X_VAR_ENTRY_PAR0_SFREQ_CLK_DOMAIN_IS_AVAILABLE_NO  0x0U
#define VBIOS_VFE_3X_VAR_ENTRY_PAR0_SFREQ_CLK_DOMAIN_IS_AVAILABLE_YES 0x1U

#define VBIOS_VFE_3X_VAR_ENTRY_PAR0_SFREQ_CLK_DOMAIN_IDX_MASK 0xFF00U
#define VBIOS_VFE_3X_VAR_ENTRY_PAR0_SFREQ_CLK_DOMAIN_IDX_SHIFT 8

#define VBIOS_VFE_3X_VAR_ENTRY_PAR0_SSTEMP_TH_CH_IDX_MASK 0xFFU
#define VBIOS_VFE_3X_VAR_ENTRY_PAR0_SSTEMP_TH_CH_IDX_SHIFT 0U

#define VBIOS_VFE_3X_VAR_ENTRY_PAR0_SSTEMP_HYS_POS_MASK 0xFF00U
#define VBIOS_VFE_3X_VAR_ENTRY_PAR0_SSTEMP_HYS_POS_SHIFT 8U

#define VBIOS_VFE_3X_VAR_ENTRY_PAR0_SSTEMP_HYS_NEG_MASK 0xFF0000U
#define VBIOS_VFE_3X_VAR_ENTRY_PAR0_SSTEMP_HYS_NEG_SHIFT 16U

#define VBIOS_VFE_3X_VAR_ENTRY_PAR0_SSFUSE_VFIELD_ID_MASK 0xFFU
#define VBIOS_VFE_3X_VAR_ENTRY_PAR0_SSFUSE_VFIELD_ID_SHIFT 0U

#define VBIOS_VFE_3X_VAR_ENTRY_PAR0_SSFUSE_VFIELD_ID_VER_MASK 0xFF00U
#define VBIOS_VFE_3X_VAR_ENTRY_PAR0_SSFUSE_VFIELD_ID_VER_SHIFT 8U

#define VBIOS_VFE_3X_VAR_ENTRY_PAR0_SSFUSE_EXPECTED_VER_MASK 0xFF0000U
#define VBIOS_VFE_3X_VAR_ENTRY_PAR0_SSFUSE_EXPECTED_VER_SHIFT 16U

#define VBIOS_VFE_3X_VAR_ENTRY_PAR0_SSFUSE_USE_DEFAULT_ON_VER_CHECK_FAIL_MASK 0x1000000U
#define VBIOS_VFE_3X_VAR_ENTRY_PAR0_SSFUSE_USE_DEFAULT_ON_VER_CHECK_FAIL_SHIFT 24U

#define VBIOS_VFE_3X_VAR_ENTRY_PAR0_SSFUSE_EXPECTED_VER_MODE_MASK 0x4000000U
#define VBIOS_VFE_3X_VAR_ENTRY_PAR0_SSFUSE_EXPECTED_VER_MODE_SHIFT 26U

#define VBIOS_VFE_3X_VAR_ENTRY_PAR0_SSFUSE_VALUE_SIGNED_INTEGER_MASK 0x2000000U
#define VBIOS_VFE_3X_VAR_ENTRY_PAR0_SSFUSE_VALUE_SIGNED_INTEGER_SHIFT 25U

#define VBIOS_VFE_3X_VAR_ENTRY_PAR0_SSFUSE_USE_DEFAULT_ON_VER_CHECK_FAIL_YES 0x00000001U
#define VBIOS_VFE_3X_VAR_ENTRY_PAR0_SSFUSE_USE_DEFAULT_ON_VER_CHECK_FAIL_NO 0x00000000U
#define VBIOS_VFE_3X_VAR_ENTRY_PAR0_DPROD_VFE_VAR_IDX_0_MASK 0xFFU
#define VBIOS_VFE_3X_VAR_ENTRY_PAR0_DPROD_VFE_VAR_IDX_0_SHIFT 0U

#define VBIOS_VFE_3X_VAR_ENTRY_PAR0_DPROD_VFE_VAR_IDX_1_MASK 0xFF00U
#define VBIOS_VFE_3X_VAR_ENTRY_PAR0_DPROD_VFE_VAR_IDX_1_SHIFT 8U

#define VBIOS_VFE_3X_VAR_ENTRY_PAR0_DSUM_VFE_VAR_IDX_0_MASK 0xFFU
#define VBIOS_VFE_3X_VAR_ENTRY_PAR0_DSUM_VFE_VAR_IDX_0_SHIFT 0U

#define VBIOS_VFE_3X_VAR_ENTRY_PAR0_DSUM_VFE_VAR_IDX_1_MASK 0xFF00U
#define VBIOS_VFE_3X_VAR_ENTRY_PAR0_DSUM_VFE_VAR_IDX_1_SHIFT 8U

#define VBIOS_VFE_3X_VAR_ENTRY_PAR0_SINGLE_CALLER_SPECIFIED_UID_MASK 0xFFU
#define VBIOS_VFE_3X_VAR_ENTRY_PAR0_SINGLE_CALLER_SPECIFIED_UID_SHIFT 0U

#define VBIOS_VFE_3X_VAR_ENTRY_PAR1_SSFUSE_DEFAULT_VAL_MASK 0xFFFFFFFFU
#define VBIOS_VFE_3X_VAR_ENTRY_PAR1_SSFUSE_DEFAULT_VAL_SHIFT 0U

#define VBIOS_VFE_3X_VAR_ENTRY_PAR1_SSFUSE_HW_CORRECTION_SCALE_MASK 0xFFFFFFFFU
#define VBIOS_VFE_3X_VAR_ENTRY_PAR1_SSFUSE_HW_CORRECTION_SCALE_SHIFT 0U

#define VBIOS_VFE_3X_VAR_ENTRY_PAR1_SSFUSE_HW_CORRECTION_OFFSET_MASK 0xFFFFFFFFU
#define VBIOS_VFE_3X_VAR_ENTRY_PAR1_SSFUSE_HW_CORRECTION_OFFSET_SHIFT 0U

#define VBIOS_VFE_3X_EQU_ENTRY_SIZE_18                                     0x18U

struct vbios_vfe_3x_equ_entry_struct {
	u8 type;
	u8 var_idx;
	u8 equ_idx_next;
	u32 out_range_min;
	u32 out_range_max;
	u32 param0;
	u32 param1;
	u32 param2;
	u8 param3;
} __attribute__((packed));


#define VBIOS_VFE_3X_EQU_ENTRY_TYPE_DISABLED                               0x00U
#define VBIOS_VFE_3X_EQU_ENTRY_TYPE_QUADRATIC                              0x01U
#define VBIOS_VFE_3X_EQU_ENTRY_TYPE_MINMAX                                 0x02U
#define VBIOS_VFE_3X_EQU_ENTRY_TYPE_COMPARE                                0x03U
#define VBIOS_VFE_3X_EQU_ENTRY_TYPE_QUADRATIC_FXP                          0x04U
#define VBIOS_VFE_3X_EQU_ENTRY_TYPE_MINMAX_FXP                             0x05U
#define VBIOS_VFE_3X_EQU_ENTRY_TYPE_EQUATION_SCALAR                        0x06U

#define VBIOS_VFE_3X_EQU_ENTRY_IDX_INVALID                                 0xFFU

#define VBIOS_VFE_3X_EQU_ENTRY_PAR0_QUADRATIC_C0_MASK 0xFFFFFFFFU
#define VBIOS_VFE_3X_EQU_ENTRY_PAR0_QUADRATIC_C0_SHIFT 0U

#define VBIOS_VFE_3X_EQU_ENTRY_PAR0_MINMAX_VFE_EQU_IDX_0_MASK 0xFFU
#define VBIOS_VFE_3X_EQU_ENTRY_PAR0_MINMAX_VFE_EQU_IDX_0_SHIFT 0U

#define VBIOS_VFE_3X_EQU_ENTRY_PAR0_MINMAX_VFE_EQU_IDX_1_MASK 0xFF00U
#define VBIOS_VFE_3X_EQU_ENTRY_PAR0_MINMAX_VFE_EQU_IDX_1_SHIFT 8U

#define VBIOS_VFE_3X_EQU_ENTRY_PAR0_MINMAX_CRIT_MASK 0x10000U
#define VBIOS_VFE_3X_EQU_ENTRY_PAR0_MINMAX_CRIT_SHIFT 16U
#define VBIOS_VFE_3X_EQU_ENTRY_PAR0_MINMAX_CRIT_MIN 0x00000000U
#define VBIOS_VFE_3X_EQU_ENTRY_PAR0_MINMAX_CRIT_MAX 0x00000001U

#define VBIOS_VFE_3X_EQU_ENTRY_PAR0_COMPARE_CRIT_MASK 0xFFFFFFFFU
#define VBIOS_VFE_3X_EQU_ENTRY_PAR0_COMPARE_CRIT_SHIFT 0U

#define VBIOS_VFE_3X_EQU_ENTRY_PAR0_EQUATION_SCALAR_IDX_TO_SCALE_MASK 0xFFU
#define VBIOS_VFE_3X_EQU_ENTRY_PAR0_EQUATION_SCALAR_IDX_TO_SCALE_SHIFT 0x00U

#define VBIOS_VFE_3X_EQU_ENTRY_PAR1_QUADRATIC_C1_MASK 0xFFFFFFFFU
#define VBIOS_VFE_3X_EQU_ENTRY_PAR1_QUADRATIC_C1_SHIFT 0U

#define VBIOS_VFE_3X_EQU_ENTRY_PAR1_COMPARE_VFE_EQU_IDX_TRUE_MASK 0xFFU
#define VBIOS_VFE_3X_EQU_ENTRY_PAR1_COMPARE_VFE_EQU_IDX_TRUE_SHIFT 0U

#define VBIOS_VFE_3X_EQU_ENTRY_PAR1_COMPARE_VFE_EQU_IDX_FALSE_MASK 0xFF00U
#define VBIOS_VFE_3X_EQU_ENTRY_PAR1_COMPARE_VFE_EQU_IDX_FALSE_SHIFT 8U

#define VBIOS_VFE_3X_EQU_ENTRY_PAR1_COMPARE_FUNCTION_MASK 0x70000U
#define VBIOS_VFE_3X_EQU_ENTRY_PAR1_COMPARE_FUNCTION_SHIFT 16U
#define VBIOS_VFE_3X_EQU_ENTRY_PAR1_COMPARE_FUNCTION_EQUAL 0x00000000U
#define VBIOS_VFE_3X_EQU_ENTRY_PAR1_COMPARE_FUNCTION_GREATER_EQ 0x00000001U
#define VBIOS_VFE_3X_EQU_ENTRY_PAR1_COMPARE_FUNCTION_GREATER 0x00000002U

#define VBIOS_VFE_3X_EQU_ENTRY_PAR3_OUTPUT_TYPE_MASK 		0xFU
#define VBIOS_VFE_3X_EQU_ENTRY_PAR3_OUTPUT_TYPE_SHIFT 		0U
#define VBIOS_VFE_3X_EQU_ENTRY_PAR3_OUTPUT_TYPE_UNITLESS                     0x0U
#define VBIOS_VFE_3X_EQU_ENTRY_PAR3_OUTPUT_TYPE_FREQ_MHZ                     0x1U
#define VBIOS_VFE_3X_EQU_ENTRY_PAR3_OUTPUT_TYPE_VOLT_UV                      0x2U
#define VBIOS_VFE_3X_EQU_ENTRY_PAR3_OUTPUT_TYPE_VF_GAIN                      0x3U
#define VBIOS_VFE_3X_EQU_ENTRY_PAR3_OUTPUT_TYPE_VOLT_DELTA_UV                0x4U
#define VBIOS_VFE_3X_EQU_ENTRY_PAR3_OUTPUT_TYPE_RSVD	                     0x5U
#define VBIOS_VFE_3X_EQU_ENTRY_PAR3_OUTPUT_TYPE_WORK_TYPE                    0x6U
#define VBIOS_VFE_3X_EQU_ENTRY_PAR3_OUTPUT_TYPE_UTIL_RATIO                   0x7U
#define VBIOS_VFE_3X_EQU_ENTRY_PAR3_OUTPUT_TYPE_WORK_FB_NORM                 0x8U
#define VBIOS_VFE_3X_EQU_ENTRY_PAR3_OUTPUT_TYPE_POWER_MW                     0x9U
#define VBIOS_VFE_3X_EQU_ENTRY_PAR3_OUTPUT_TYPE_PWR_OVER_UTIL_SLOPE          0xAU
#define VBIOS_VFE_3X_EQU_ENTRY_PAR3_OUTPUT_TYPE_VIN_CODE                     0xBU
#define VBIOS_VFE_3X_EQU_ENTRY_PAR3_OUTPUT_TYPE_THRESHOLD                    0xCU

#define NV_VFIELD_DESC_SIZE_BYTE            0x00000000U
#define NV_VFIELD_DESC_SIZE_WORD            0x00000001U
#define NV_VFIELD_DESC_SIZE_DWORD           0x00000002U
#define VFIELD_SIZE(pvregentry) ((pvregentry->strap_reg_desc & 0x18U) >> 3U)

#define NV_PMU_BIOS_VFIELD_DESC_CODE_INVALID         0x00000000U
#define NV_PMU_BIOS_VFIELD_DESC_CODE_REG             0x00000001U
#define NV_PMU_BIOS_VFIELD_DESC_CODE_INDEX_REG       0x00000002U

#define NV_VFIELD_DESC_CODE_INVALID         NV_PMU_BIOS_VFIELD_DESC_CODE_INVALID
#define NV_VFIELD_DESC_CODE_REG             NV_PMU_BIOS_VFIELD_DESC_CODE_REG
#define NV_VFIELD_DESC_CODE_INDEX_REG       NV_PMU_BIOS_VFIELD_DESC_CODE_INDEX_REG

#define VFIELD_CODE(pvregentry) ((pvregentry->strap_reg_desc & 0xE0U) >> 5U)

#define VFIELD_ID_S_PARAM                       0x07U
#define VFIELD_ID_STRAP_IDDQ                    0x09U
#define VFIELD_ID_STRAP_IDDQ_1                  0x0BU

#define VFIELD_REG_HEADER_SIZE 3U
struct vfield_reg_header {
	u8 version;
	u8 entry_size;
	u8 count;
} __attribute__((packed));

#define VBIOS_VFIELD_REG_TABLE_VERSION_1_0  0x10U


#define VFIELD_REG_ENTRY_SIZE 13U
struct vfield_reg_entry {
	u8 strap_reg_desc;
	u32 reg;
	u32 reg_index;
	u32 index;
} __attribute__((packed));

#define VFIELD_HEADER_SIZE 3U

struct vfield_header {
	u8 version;
	u8 entry_size;
	u8 count;
} __attribute__((packed));

#define VBIOS_VFIELD_TABLE_VERSION_1_0  0x10U

#define VFIELD_BIT_START(ventry) ((ventry).strap_desc & 0x1FU)
#define VFIELD_BIT_STOP(ventry)	(((ventry).strap_desc & 0x3E0U) >> 5U)
#define VFIELD_BIT_REG(ventry) (((ventry).strap_desc & 0x3C00U) >> 10U)

#define VFIELD_ENTRY_SIZE 3U

struct vfield_entry {
	u8 strap_id;
	u16 strap_desc;
} __attribute__((packed));

#define PERF_CLK_DOMAINS_IDX_MAX		(32U)
#define PERF_CLK_DOMAINS_IDX_INVALID		PERF_CLK_DOMAINS_IDX_MAX

#define VBIOS_PSTATE_TABLE_VERSION_6X		0x60U
#define VBIOS_PSTATE_HEADER_6X_SIZE_10		(10U)

struct vbios_pstate_header_6x {
	u8 version;
	u8 header_size;
	u8 base_entry_size;
	u8 base_entry_count;
	u8 clock_entry_size;
	u8 clock_entry_count;
	u8 flags0;
	u8 initial_pstate;
	u8 cpi_support_level;
	u8 cpi_features;
} __attribute__((packed));

#define VBIOS_PSTATE_HEADER_6X_FLAGS0_PSTATES_MASK                0x1U
#define VBIOS_PSTATE_HEADER_6X_FLAGS0_PSTATES_SHIFT               0x0U
#define VBIOS_PSTATE_HEADER_6X_FLAGS0_PSTATES_NOT_REQUIRED        0x0U
#define VBIOS_PSTATE_HEADER_6X_FLAGS0_PSTATES_REQUIRED            0x1U
#define VBIOS_PSTATE_HEADER_6X_FLAGS0_ARBITER_LOCK_MASK           0x2U
#define VBIOS_PSTATE_HEADER_6X_FLAGS0_ARBITER_LOCK_SHIFT          0x1U
#define VBIOS_PSTATE_HEADER_6X_FLAGS0_ARBITER_LOCK_DISABLED       0x0U
#define VBIOS_PSTATE_HEADER_6X_FLAGS0_ARBITER_LOCK_ENABLED        0x1U

#define VBIOS_PSTATE_CLOCK_ENTRY_6X_SIZE_6                        6U
#define VBIOS_PSTATE_BASE_ENTRY_6X_SIZE_5                         0x5U
#define VBIOS_PSTATE_CLOCK_ENTRY_6X_COUNT                         10U


struct vbios_pstate_entry_clock_6x {
	u16 param0;
	u32 param1;
} __attribute__((packed));

struct vbios_pstate_entry_6x {
	u8 pstate_level;
	u8 flags0;
	u8 lpwr_entry_idx;
	u8 pcie_idx;
	u8 nvlink_idx;
	struct vbios_pstate_entry_clock_6x
		nvgpu_clockEntry[PERF_CLK_DOMAINS_IDX_MAX];
} __attribute__((packed));

#define VBIOS_PSTATE_6X_FLAGS0_PSTATE_CAP_MASK                     0x3U
#define VBIOS_PSTATE_6X_FLAGS0_PSTATE_CAP_SHIFT                    0x0U
#define VBIOS_PSTATE_6X_FLAGS0_PSTATE_CAP_RM_DEFAULT               0x0U
#define VBIOS_PSTATE_6X_FLAGS0_PSTATE_CAP_GLITCHY                  0x1U
#define VBIOS_PSTATE_6X_FLAGS0_PSTATE_CAP_WAIT_VBLANK              0x2U

#define VBIOS_PSTATE_6X_FLAGS0_CUDA_MASK                           0x4U
#define VBIOS_PSTATE_6X_FLAGS0_CUDA_SHIFT                          0x2U
#define VBIOS_PSTATE_6X_FLAGS0_CUDA_SAFE                           0x0U
#define VBIOS_PSTATE_6X_FLAGS0_CUDA_NOT_SAFE                       0x1U

#define VBIOS_PSTATE_6X_FLAGS0_OVOC_MASK                           0x8U
#define VBIOS_PSTATE_6X_FLAGS0_OVOC_SHIFT                          0x3U
#define VBIOS_PSTATE_6X_FLAGS0_OVOC_DISABLED                       0x0U
#define VBIOS_PSTATE_6X_FLAGS0_OVOC_ENABLED                        0x1U

#define VBIOS_PSTATE_6X_FLAGS0_DECREASE_THRESHOLD_MASK             0x10U
#define VBIOS_PSTATE_6X_FLAGS0_DECREASE_THRESHOLD_SHIFT            0x4U
#define VBIOS_PSTATE_6X_FLAGS0_DECREASE_THRESHOLD_DEFAULT          0x0U
#define VBIOS_PSTATE_6X_FLAGS0_DECREASE_THRESHOLD_IGNORE_FB        0x1U


#define VBIOS_PSTATE_6X_CLOCK_PROG_PARAM0_NOM_FREQ_MHZ_SHIFT		      0U
#define VBIOS_PSTATE_6X_CLOCK_PROG_PARAM0_NOM_FREQ_MHZ_MASK	     0x00003FFFU

#define VBIOS_PSTATE_6X_CLOCK_PROG_PARAM1_MIN_FREQ_MHZ_SHIFT		      0U
#define VBIOS_PSTATE_6X_CLOCK_PROG_PARAM1_MIN_FREQ_MHZ_MASK	     0x00003FFFU

#define VBIOS_PSTATE_6X_CLOCK_PROG_PARAM1_MAX_FREQ_MHZ_SHIFT		     14U
#define VBIOS_PSTATE_6X_CLOCK_PROG_PARAM1_MAX_FREQ_MHZ_MASK	     0x0FFFC000U

#define VBIOS_PERFLEVEL_SKIP_ENTRY					0xFFU

#define VBIOS_MEMORY_CLOCK_HEADER_11_VERSION				0x11U

#define VBIOS_MEMORY_CLOCK_HEADER_11_0_SIZE				16U
#define VBIOS_MEMORY_CLOCK_HEADER_11_1_SIZE				21U
#define VBIOS_MEMORY_CLOCK_HEADER_11_2_SIZE				26U

struct vbios_memory_clock_header_1x {
	u8 version;
	u8 header_size;
	u8 base_entry_size;
	u8 strap_entry_size;
	u8 strap_entry_count;
	u8 entry_count;
	u8 flags;
	u8 fbvdd_settle_time;
	u32 cfg_pwrd_val;
	u16 fbvddq_high;
	u16 fbvddq_low;
	u32 script_list_ptr;
	u8 script_list_count;
	u32 cmd_script_list_ptr;
	u8 cmd_script_list_count;
} __attribute__((packed));

#define VBIOS_MEMORY_CLOCK_BASE_ENTRY_11_2_SIZE				20U

struct vbios_memory_clock_base_entry_11 {
	u16 minimum;
	u16 maximum;
	u32 script_pointer;
	u8 flags0;
	u32 fbpa_config;
	u32 fbpa_config1;
	u8 flags1;
	u8 ref_mpllssf_freq_delta;
	u8 flags2;
} __attribute__((packed));

/* Script Pointer Index */
/* #define VBIOS_MEMORY_CLOCK_BASE_ENTRY_11_FLAGS1_SCRIPT_INDEX		3:2*/
#define VBIOS_MEMORY_CLOCK_BASE_ENTRY_11_FLAGS1_SCRIPT_INDEX_MASK	0xcU
#define VBIOS_MEMORY_CLOCK_BASE_ENTRY_11_FLAGS1_SCRIPT_INDEX_SHIFT	2U
/* #define VBIOS_MEMORY_CLOCK_BASE_ENTRY_12_FLAGS2_CMD_SCRIPT_INDEX	1:0*/
#define VBIOS_MEMORY_CLOCK_BASE_ENTRY_12_FLAGS2_CMD_SCRIPT_INDEX_MASK 0x3U
#define VBIOS_MEMORY_CLOCK_BASE_ENTRY_12_FLAGS2_CMD_SCRIPT_INDEX_SHIFT	0U

#define VBIOS_POWER_SENSORS_VERSION_2X                                     0x20U
#define VBIOS_POWER_SENSORS_2X_HEADER_SIZE_08                        0x00000008U

struct pwr_sensors_2x_header {
	u8 version;
	u8 header_size;
	u8 table_entry_size;
	u8 num_table_entries;
	u32 ba_script_pointer;
} __attribute__((packed));

#define VBIOS_POWER_SENSORS_2X_ENTRY_SIZE_15                         0x00000015U

struct pwr_sensors_2x_entry {
	u8 flags0;
	u32 class_param0;
	u32 sensor_param0;
	u32 sensor_param1;
	u32 sensor_param2;
	u32 sensor_param3;
} __attribute__((packed));

#define NV_VBIOS_POWER_SENSORS_2X_ENTRY_FLAGS0_CLASS_MASK                   0xFU
#define NV_VBIOS_POWER_SENSORS_2X_ENTRY_FLAGS0_CLASS_SHIFT                    0U
#define NV_VBIOS_POWER_SENSORS_2X_ENTRY_FLAGS0_CLASS_I2C             0x00000001U

#define NV_VBIOS_POWER_SENSORS_2X_ENTRY_CLASS_PARAM0_I2C_INDEX_MASK        0xFFU
#define NV_VBIOS_POWER_SENSORS_2X_ENTRY_CLASS_PARAM0_I2C_INDEX_SHIFT          0U
#define NV_VBIOS_POWER_SENSORS_2X_ENTRY_CLASS_PARAM0_I2C_USE_FXP8_8_MASK  0x100U
#define NV_VBIOS_POWER_SENSORS_2X_ENTRY_CLASS_PARAM0_I2C_USE_FXP8_8_SHIFT     8U

#define NV_VBIOS_POWER_SENSORS_2X_ENTRY_SENSOR_PARAM0_INA3221_RSHUNT0_MOHM_MASK   0xFFFFU
#define NV_VBIOS_POWER_SENSORS_2X_ENTRY_SENSOR_PARAM0_INA3221_RSHUNT0_MOHM_SHIFT  0U
#define NV_VBIOS_POWER_SENSORS_2X_ENTRY_SENSOR_PARAM0_INA3221_RSHUNT1_MOHM_MASK   0xFFFF0000U
#define NV_VBIOS_POWER_SENSORS_2X_ENTRY_SENSOR_PARAM0_INA3221_RSHUNT1_MOHM_SHIFT  16U
#define NV_VBIOS_POWER_SENSORS_2X_ENTRY_SENSOR_PARAM1_INA3221_RSHUNT2_MOHM_MASK   0xFFFFU
#define NV_VBIOS_POWER_SENSORS_2X_ENTRY_SENSOR_PARAM1_INA3221_RSHUNT2_MOHM_SHIFT  0U
#define NV_VBIOS_POWER_SENSORS_2X_ENTRY_SENSOR_PARAM1_INA3221_CONFIGURATION_MASK  0xFFFF0000U
#define NV_VBIOS_POWER_SENSORS_2X_ENTRY_SENSOR_PARAM1_INA3221_CONFIGURATION_SHIFT 16U

#define NV_VBIOS_POWER_SENSORS_2X_ENTRY_SENSOR_PARAM2_INA3221_MASKENABLE_MASK   0xFFFFU
#define NV_VBIOS_POWER_SENSORS_2X_ENTRY_SENSOR_PARAM2_INA3221_MASKENABLE_SHIFT  0U
#define NV_VBIOS_POWER_SENSORS_2X_ENTRY_SENSOR_PARAM2_INA3221_GPIOFUNCTION_MASK 0xFF0000U
#define NV_VBIOS_POWER_SENSORS_2X_ENTRY_SENSOR_PARAM2_INA3221_GPIOFUNCTION_SHIFT   16U
#define NV_VBIOS_POWER_SENSORS_2X_ENTRY_SENSOR_PARAM3_INA3221_CURR_CORRECT_M_MASK  0xFFFFU
#define NV_VBIOS_POWER_SENSORS_2X_ENTRY_SENSOR_PARAM3_INA3221_CURR_CORRECT_M_SHIFT 0U
#define NV_VBIOS_POWER_SENSORS_2X_ENTRY_SENSOR_PARAM3_INA3221_CURR_CORRECT_B_MASK  0xFFFF0000U
#define NV_VBIOS_POWER_SENSORS_2X_ENTRY_SENSOR_PARAM3_INA3221_CURR_CORRECT_B_SHIFT 16U

#define VBIOS_POWER_TOPOLOGY_VERSION_2X                                    0x20U
#define VBIOS_POWER_TOPOLOGY_2X_HEADER_SIZE_06                       0x00000006U

struct pwr_topology_2x_header {
	u8 version;
	u8 header_size;
	u8 table_entry_size;
	u8 num_table_entries;
	u8 rel_entry_size;
	u8 num_rel_entries;
} __attribute__((packed));

#define VBIOS_POWER_TOPOLOGY_2X_ENTRY_SIZE_16                        0x00000016U

struct pwr_topology_2x_entry {
	u8 flags0;
	u8 pwr_rail;
	u32 param0;
	u32 curr_corr_slope;
	u32 curr_corr_offset;
	u32 param1;
	u32 param2;
} __attribute__((packed));

#define NV_VBIOS_POWER_TOPOLOGY_2X_ENTRY_FLAGS0_CLASS_MASK                  0xFU
#define NV_VBIOS_POWER_TOPOLOGY_2X_ENTRY_FLAGS0_CLASS_SHIFT                   0U
#define NV_VBIOS_POWER_TOPOLOGY_2X_ENTRY_FLAGS0_CLASS_SENSOR      U8(0x00000001)

#define NV_VBIOS_POWER_TOPOLOGY_2X_ENTRY_PARAM1_SENSOR_INDEX_MASK          0xFFU
#define NV_VBIOS_POWER_TOPOLOGY_2X_ENTRY_PARAM1_SENSOR_INDEX_SHIFT            0U
#define NV_VBIOS_POWER_TOPOLOGY_2X_ENTRY_PARAM1_SENSOR_PROVIDER_INDEX_MASK 0xFF00U
#define NV_VBIOS_POWER_TOPOLOGY_2X_ENTRY_PARAM1_SENSOR_PROVIDER_INDEX_SHIFT   8U

#define VBIOS_POWER_POLICY_VERSION_3X                                      0x30U
#define VBIOS_POWER_POLICY_3X_HEADER_SIZE_25                         0x00000025U

struct pwr_policy_3x_header_struct {
	u8 version;
	u8 header_size;
	u8 table_entry_size;
	u8 num_table_entries;
	u16 base_sample_period;
	u16 min_client_sample_period;
	u8 table_rel_entry_size;
	u8 num_table_rel_entries;
	u8 tgp_policy_idx;
	u8 rtp_policy_idx;
	u8 mxm_policy_idx;
	u8 dnotifier_policy_idx;
	u32 d2_limit;
	u32 d3_limit;
	u32 d4_limit;
	u32 d5_limit;
	u8 low_sampling_mult;
	u8 pwr_tgt_policy_idx;
	u8 pwr_tgt_floor_policy_idx;
	u8 sm_bus_policy_idx;
	u8 table_viol_entry_size;
	u8 num_table_viol_entries;
} __attribute__((packed));

#define VBIOS_POWER_POLICY_3X_ENTRY_SIZE_2E                          0x0000002EU

struct pwr_policy_3x_entry_struct {
	u8 flags0;
	u8 ch_idx;
	u32 limit_min;
	u32 limit_rated;
	u32 limit_max;
	u32 param0;
	u32 param1;
	u32 param2;
	u32 param3;
	u32 limit_batt;
	u8 flags1;
	u8 past_length;
	u8 next_length;
	u16 ratio_min;
	u16 ratio_max;
	u8 sample_mult;
	u32 filter_param;
} __attribute__((packed));

#define NV_VBIOS_POWER_POLICY_3X_ENTRY_FLAGS0_CLASS_MASK                    0xFU
#define NV_VBIOS_POWER_POLICY_3X_ENTRY_FLAGS0_CLASS_SHIFT                     0U
#define NV_VBIOS_POWER_POLICY_3X_ENTRY_FLAGS0_CLASS_HW_THRESHOLD     0x00000005U
#define NV_VBIOS_POWER_POLICY_3X_ENTRY_FLAGS0_LIMIT_UNIT_MASK              0x10U
#define NV_VBIOS_POWER_POLICY_3X_ENTRY_FLAGS0_LIMIT_UNIT_SHIFT                4U

#define NV_VBIOS_POWER_POLICY_3X_ENTRY_FLAGS1_FULL_DEFLECTION_LIMIT_MASK    0x1U
#define NV_VBIOS_POWER_POLICY_3X_ENTRY_FLAGS1_FULL_DEFLECTION_LIMIT_SHIFT     0U
#define NV_VBIOS_POWER_POLICY_3X_ENTRY_FLAGS1_INTEGRAL_CONTROL_MASK         0x2U
#define NV_VBIOS_POWER_POLICY_3X_ENTRY_FLAGS1_INTEGRAL_CONTROL_SHIFT          1U
#define NV_VBIOS_POWER_POLICY_3X_ENTRY_FLAGS1_FILTER_TYPE_MASK             0x3CU
#define NV_VBIOS_POWER_POLICY_3X_ENTRY_FLAGS1_FILTER_TYPE_SHIFT               2U

#define NV_VBIOS_POWER_POLICY_3X_ENTRY_PARAM0_HW_THRESHOLD_THRES_IDX_MASK  0xFFU
#define NV_VBIOS_POWER_POLICY_3X_ENTRY_PARAM0_HW_THRESHOLD_THRES_IDX_SHIFT    0U
#define NV_VBIOS_POWER_POLICY_3X_ENTRY_PARAM0_HW_THRESHOLD_LOW_THRESHOLD_IDX_MASK 0xFF00U
#define NV_VBIOS_POWER_POLICY_3X_ENTRY_PARAM0_HW_THRESHOLD_LOW_THRESHOLD_IDX_SHIFT 8U
#define NV_VBIOS_POWER_POLICY_3X_ENTRY_PARAM0_HW_THRESHOLD_LOW_THRESHOLD_USE_MASK 0x10000U
#define NV_VBIOS_POWER_POLICY_3X_ENTRY_PARAM0_HW_THRESHOLD_LOW_THRESHOLD_USE_SHIFT 16U

#define NV_VBIOS_POWER_POLICY_3X_ENTRY_PARAM1_HW_THRESHOLD_LOW_THRESHOLD_VAL_MASK 0xFFFFU
#define NV_VBIOS_POWER_POLICY_3X_ENTRY_PARAM1_HW_THRESHOLD_LOW_THRESHOLD_VAL_SHIFT 0U

/* Voltage Rail Table */
struct vbios_voltage_rail_table_1x_header {
	u8 version;
	u8 header_size;
	u8 table_entry_size;
	u8 num_table_entries;
	u8 volt_domain_hal;
} __attribute__((packed));

#define NV_VBIOS_VOLTAGE_RAIL_1X_ENTRY_SIZE_07		0X00000007U
#define NV_VBIOS_VOLTAGE_RAIL_1X_ENTRY_SIZE_08		0X00000008U
#define NV_VBIOS_VOLTAGE_RAIL_1X_ENTRY_SIZE_09		0X00000009U
#define NV_VBIOS_VOLTAGE_RAIL_1X_ENTRY_SIZE_0A		0X0000000AU
#define NV_VBIOS_VOLTAGE_RAIL_1X_ENTRY_SIZE_0B		0X0000000BU
#define NV_VBIOS_VOLTAGE_RAIL_1X_ENTRY_SIZE_0C		0X0000000CU

struct vbios_voltage_rail_table_1x_entry {
	u32 boot_voltage_uv;
	u8 rel_limit_vfe_equ_idx;
	u8 alt_rel_limit_vfe_equidx;
	u8 ov_limit_vfe_equ_idx;
	u8 pwr_equ_idx;
	u8 boot_volt_vfe_equ_idx;
	u8 vmin_limit_vfe_equ_idx;
	u8 volt_margin_limit_vfe_equ_idx;
	u8 volt_scale_exp_pwr_equ_idx;
} __attribute__((packed));

/* Voltage Device Table */
struct vbios_voltage_device_table_1x_header {
	u8 version;
	u8 header_size;
	u8 table_entry_size;
	u8 num_table_entries;
} __attribute__((packed));

struct vbios_voltage_device_table_1x_entry {
	u8 type;
	u8 volt_domain;
	u16 settle_time_us;
	u32 param0;
	u32 param1;
	u32 param2;
	u32 param3;
	u32 param4;
} __attribute__((packed));

#define NV_VBIOS_VOLTAGE_DEVICE_1X_ENTRY_TYPE_INVALID		0x00U
#define NV_VBIOS_VOLTAGE_DEVICE_1X_ENTRY_TYPE_PSV		0x02U

#define NV_VBIOS_VDT_1X_ENTRY_PARAM0_PSV_INPUT_FREQUENCY_MASK	\
		U32(GENMASK(23, 0))
#define NV_VBIOS_VDT_1X_ENTRY_PARAM0_PSV_INPUT_FREQUENCY_SHIFT	0U
#define NV_VBIOS_VDT_1X_ENTRY_PARAM0_PSV_EXT_DEVICE_INDEX_MASK	\
		U32(GENMASK(31, 24))
#define NV_VBIOS_VDT_1X_ENTRY_PARAM0_PSV_EXT_DEVICE_INDEX_SHIFT	24U

#define NV_VBIOS_VDT_1X_ENTRY_PARAM1_PSV_VOLTAGE_MINIMUM_MASK	\
		U32(GENMASK(23, 0))
#define NV_VBIOS_VDT_1X_ENTRY_PARAM1_PSV_VOLTAGE_MINIMUM_SHIFT	0U
#define NV_VBIOS_VDT_1X_ENTRY_PARAM1_PSV_OPERATION_TYPE_MASK	\
		U32(GENMASK(31, 24))
#define NV_VBIOS_VDT_1X_ENTRY_PARAM1_PSV_OPERATION_TYPE_SHIFT	24U
#define NV_VBIOS_VDT_1X_ENTRY_PARAM1_PSV_OPERATION_TYPE_DEFAULT	0x00U
#define NV_VBIOS_VDT_1X_ENTRY_PARAM1_PSV_OPERATION_TYPE_LPWR_STEADY_STATE \
		0x01U
#define NV_VBIOS_VDT_1X_ENTRY_PARAM1_PSV_OPERATION_TYPE_LPWR_SLEEP_STATE \
		0x02U
#define NV_VBIOS_VDT_1X_ENTRY_PARAM1_PSV_OPERATION_TYPE_IPC_VMIN \
		0x03U
#define NV_VBIOS_VDT_1X_ENTRY_PARAM2_PSV_VOLTAGE_MAXIMUM_MASK	\
		U32(GENMASK(23, 0))
#define NV_VBIOS_VDT_1X_ENTRY_PARAM2_PSV_VOLTAGE_MAXIMUM_SHIFT	0U
#define NV_VBIOS_VDT_1X_ENTRY_PARAM2_PSV_RSVD_MASK		\
		U32(GENMASK(31, 24))
#define NV_VBIOS_VDT_1X_ENTRY_PARAM2_PSV_RSVD_SHIFT		24U

#define NV_VBIOS_VDT_1X_ENTRY_PARAM3_PSV_VOLTAGE_BASE_MASK	\
		U32(GENMASK(23, 0))
#define NV_VBIOS_VDT_1X_ENTRY_PARAM3_PSV_VOLTAGE_BASE_SHIFT	0U
#define NV_VBIOS_VDT_1X_ENTRY_PARAM3_PSV_VOLTAGE_STEPS_MASK	\
		U32(GENMASK(31, 24))
#define NV_VBIOS_VDT_1X_ENTRY_PARAM3_PSV_VOLTAGE_STEPS_SHIFT	24U

#define NV_VBIOS_VDT_1X_ENTRY_PARAM4_PSV_OFFSET_SCALE_MASK \
		U32(GENMASK(23, 0))
#define NV_VBIOS_VDT_1X_ENTRY_PARAM4_PSV_OFFSET_SCALE_SHIFT	0U
#define NV_VBIOS_VDT_1X_ENTRY_PARAM4_PSV_RSVD_MASK		\
		U32(GENMASK(31, 24))
#define NV_VBIOS_VDT_1X_ENTRY_PARAM4_PSV_RSVD_SHIFT	24U

/* Voltage Policy Table */
struct vbios_voltage_policy_table_1x_header {
	u8 version;
	u8 header_size;
	u8 table_entry_size;
	u8 num_table_entries;
	u8 perf_core_vf_seq_policy_idx;
} __attribute__((packed));

struct vbios_voltage_policy_table_1x_entry {
	u8 type;
	u32 param0;
	u32 param1;
	u32 param2;
	u32 param3;
} __attribute__((packed));

#define NV_VBIOS_VOLTAGE_POLICY_1X_ENTRY_TYPE_INVALID			0x00U
#define NV_VBIOS_VOLTAGE_POLICY_1X_ENTRY_TYPE_SINGLE_RAIL		0x01U
#define NV_VBIOS_VOLTAGE_POLICY_1X_ENTRY_TYPE_SR_MULTI_STEP		0x02U
#define NV_VBIOS_VOLTAGE_POLICY_1X_ENTRY_TYPE_SR_SINGLE_STEP		0x03U
#define NV_VBIOS_VOLTAGE_POLICY_1X_ENTRY_TYPE_SINGLE_RAIL_MULTI_STEP	0x04U

#define NV_VBIOS_VPT_ENTRY_PARAM0_SINGLE_RAIL_VOLT_DOMAIN_MASK \
		U32(GENMASK(7, 0))
#define NV_VBIOS_VPT_ENTRY_PARAM0_SINGLE_RAIL_VOLT_DOMAIN_SHIFT		0U
#define NV_VBIOS_VPT_ENTRY_PARAM0_RSVD_MASK	U32(GENMASK(8, 31))
#define NV_VBIOS_VPT_ENTRY_PARAM0_RSVD_SHIFT	8U

#define NV_VBIOS_VPT_ENTRY_PARAM0_SR_VD_MASTER_MASK \
		U32(GENMASK(7, 0))
#define NV_VBIOS_VPT_ENTRY_PARAM0_SR_VD_MASTER_SHIFT 0U
#define NV_VBIOS_VPT_ENTRY_PARAM0_SR_VD_SLAVE_MASK \
		U32(GENMASK(15, 8))
#define NV_VBIOS_VPT_ENTRY_PARAM0_SR_VD_SLAVE_SHIFT 8U
#define NV_VBIOS_VPT_ENTRY_PARAM0_SR_DELTA_SM_MIN_MASK \
		U32(GENMASK(23, 16))
#define NV_VBIOS_VPT_ENTRY_PARAM0_SR_DELTA_SM_MIN_SHIFT 16U
#define NV_VBIOS_VPT_ENTRY_PARAM0_SR_DELTA_SM_MAX_MASK \
		U32(GENMASK(31, 24))
#define NV_VBIOS_VPT_ENTRY_PARAM0_SR_DELTA_SM_MAX_SHIFT 24U

#define NV_VBIOS_VPT_ENTRY_PARAM1_SR_SETTLE_TIME_INTERMEDIATE_MASK \
		U32(GENMASK(15, 0))
#define NV_VBIOS_VPT_ENTRY_PARAM1_SR_SETTLE_TIME_INTERMEDIATE_SHIFT 0U
#define NV_VBIOS_VPT_ENTRY_PARAM2_SR_RAMP_UP_STEP_SIZE_UV_MASK \
		U32(GENMASK(31, 0))
#define NV_VBIOS_VPT_ENTRY_PARAM2_SR_RAMP_UP_STEP_SIZE_UV_SHIFT 0U
#define NV_VBIOS_VPT_ENTRY_PARAM3_SR_RAMP_DOWN_STEP_SIZE_UV_MASK \
		U32(GENMASK(31, 0))
#define NV_VBIOS_VPT_ENTRY_PARAM3_SR_RAMP_DOWN_STEP_SIZE_UV_SHIFT 0U

/* Type-Specific Parameter DWORD 0 - Type = _SR_MULTI_STEP */
#define NV_VBIOS_VPT_ENTRY_PARAM1_SR_SETTLE_TIME_INTERMEDIATE_MASK \
		U32(GENMASK(15, 0))
#define NV_VBIOS_VPT_ENTRY_PARAM1_SR_SETTLE_TIME_INTERMEDIATE_SHIFT \
		0U

#define VBIOS_THERM_DEVICE_VERSION_1X                                      0x10U

#define VBIOS_THERM_DEVICE_1X_HEADER_SIZE_04                         0x00000004U

struct therm_device_1x_header {
	u8 version;
	u8 header_size;
	u8 table_entry_size;
	u8 num_table_entries;
} ;

struct therm_device_1x_entry {
	u8 class_id;
	u8 param0;
	u8 flags;
} ;

#define NV_VBIOS_THERM_DEVICE_1X_ENTRY_CLASS_INVALID		0x00U
#define NV_VBIOS_THERM_DEVICE_1X_ENTRY_CLASS_GPU		0x01U
#define NV_VBIOS_THERM_DEVICE_1X_ENTRY_CLASS_GPU_GPC_TSOSC	0x02U
#define NV_VBIOS_THERM_DEVICE_1X_ENTRY_CLASS_GPU_GPC_SCI	0x03U
#define NV_VBIOS_THERM_DEVICE_1X_ENTRY_CLASS_HBM2_SITE		0x70U
#define NV_VBIOS_THERM_DEVICE_1X_ENTRY_CLASS_HBM2_COMBINED	0x71U

#define NV_VBIOS_THERM_DEVICE_1X_ENTRY_PARAM0_I2C_DEVICE_INDEX_MASK        0xFFU
#define NV_VBIOS_THERM_DEVICE_1X_ENTRY_PARAM0_I2C_DEVICE_INDEX_SHIFT          0U

#define VBIOS_THERM_CHANNEL_VERSION_1X                                     0x10U

#define VBIOS_THERM_CHANNEL_1X_HEADER_SIZE_09                        0x00000009U

struct therm_channel_1x_header {
	u8 version;
	u8 header_size;
	u8 table_entry_size;
	u8 num_table_entries;
	u8 gpu_avg_pri_ch_idx;
	u8 gpu_max_pri_ch_idx;
	u8 board_pri_ch_idx;
	u8 mem_pri_ch_idx;
	u8 pwr_supply_pri_ch_idx;
} __attribute__((packed));

struct therm_channel_1x_entry {
	u8 class_id;
	u8 param0;
	u8 param1;
	u8 param2;
	u8 flags;
} __attribute__((packed));

#define NV_VBIOS_THERM_CHANNEL_1X_ENTRY_CLASS_DEVICE                       0x01U

#define NV_VBIOS_THERM_CHANNEL_1X_ENTRY_PARAM0_DEVICE_INDEX_MASK           0xFFU
#define NV_VBIOS_THERM_CHANNEL_1X_ENTRY_PARAM0_DEVICE_INDEX_SHIFT             0U

#define NV_VBIOS_THERM_CHANNEL_1X_ENTRY_PARAM1_DEVICE_PROVIDER_INDEX_MASK  0xFFU
#define NV_VBIOS_THERM_CHANNEL_1X_ENTRY_PARAM1_DEVICE_PROVIDER_INDEX_SHIFT    0U

/* Frequency Controller Table */
struct vbios_fct_1x_header {
	u8 version;
	u8 header_size;
	u8 entry_size;
	u8 entry_count;
	u16 sampling_period_ms;
} __attribute__((packed));

struct vbios_fct_1x_entry {
	u8 flags0;
	u8 clk_domain_idx;
	u16 param0;
	u16 param1;
	u32 param2;
	u32 param3;
	u32 param4;
	u32 param5;
	u32 param6;
	u32 param7;
	u32 param8;
} __attribute__((packed));

#define NV_VBIOS_FCT_1X_ENTRY_FLAGS0_TYPE_MASK U8(GENMASK(3, 0))
#define NV_VBIOS_FCT_1X_ENTRY_FLAGS0_TYPE_SHIFT 0U
#define NV_VBIOS_FCT_1X_ENTRY_FLAGS0_TYPE_DISABLED 0x0U
#define NV_VBIOS_FCT_1X_ENTRY_FLAGS0_TYPE_PI       0x1U

#define NV_VBIOS_FCT_1X_ENTRY_PARAM0_ID_MASK U16(GENMASK(7, 0))
#define NV_VBIOS_FCT_1X_ENTRY_PARAM0_ID_SHIFT 0U
#define NV_VBIOS_FCT_1X_ENTRY_PARAM0_ID_SYS   0x00U
#define NV_VBIOS_FCT_1X_ENTRY_PARAM0_ID_LTC   0x01U
#define NV_VBIOS_FCT_1X_ENTRY_PARAM0_ID_XBAR  0x02U
#define NV_VBIOS_FCT_1X_ENTRY_PARAM0_ID_GPC0  0x03U
#define NV_VBIOS_FCT_1X_ENTRY_PARAM0_ID_GPC1  0x04U
#define NV_VBIOS_FCT_1X_ENTRY_PARAM0_ID_GPC2  0x05U
#define NV_VBIOS_FCT_1X_ENTRY_PARAM0_ID_GPC3  0x06U
#define NV_VBIOS_FCT_1X_ENTRY_PARAM0_ID_GPC4  0x07U
#define NV_VBIOS_FCT_1X_ENTRY_PARAM0_ID_GPC5  0x08U
#define NV_VBIOS_FCT_1X_ENTRY_PARAM0_ID_GPCS  0x09U

#define NV_VBIOS_FCT_1X_ENTRY_PARAM0_FREQ_MODE_MASK U16(GENMASK(9, 8))
#define NV_VBIOS_FCT_1X_ENTRY_PARAM0_FREQ_MODE_SHIFT 8U
#define NV_VBIOS_FCT_1X_ENTRY_PARAM0_FREQ_MODE_BCAST 0x0U
#define NV_VBIOS_FCT_1X_ENTRY_PARAM0_FREQ_MODE_MIN   0x1U
#define NV_VBIOS_FCT_1X_ENTRY_PARAM0_FREQ_MODE_MAX   0x2U
#define NV_VBIOS_FCT_1X_ENTRY_PARAM0_FREQ_MODE_AVG   0x3U

#define NV_VBIOS_FCT_1X_ENTRY_PARAM1_SLOWDOWN_PCT_MIN_MASK U16(GENMASK(7, 0))
#define NV_VBIOS_FCT_1X_ENTRY_PARAM1_SLOWDOWN_PCT_MIN_SHIFT 0U

#define NV_VBIOS_FCT_1X_ENTRY_PARAM1_POISON_MASK U16(GENMASK(8, 8))
#define NV_VBIOS_FCT_1X_ENTRY_PARAM1_POISON_SHIFT 8U
#define NV_VBIOS_FCT_1X_ENTRY_PARAM1_POISON_NO  0x0U
#define NV_VBIOS_FCT_1X_ENTRY_PARAM1_POISON_YES 0x1U

#define NV_VBIOS_FCT_1X_ENTRY_PARAM2_PROP_GAIN_MASK U32(GENMASK(31, 0))
#define NV_VBIOS_FCT_1X_ENTRY_PARAM2_PROP_GAIN_SHIFT 0U

#define NV_VBIOS_FCT_1X_ENTRY_PARAM3_INTEG_GAIN_MASK U32(GENMASK(31, 0))
#define NV_VBIOS_FCT_1X_ENTRY_PARAM3_INTEG_GAIN_SHIFT 0U


#define NV_VBIOS_FCT_1X_ENTRY_PARAM4_INTEG_DECAY_MASK U32(GENMASK(31, 0))
#define NV_VBIOS_FCT_1X_ENTRY_PARAM4_INTEG_DECAY_SHIFT 0U

#define NV_VBIOS_FCT_1X_ENTRY_PARAM5_VOLT_DELTA_MIN_MASK U32(GENMASK(31, 0))
#define NV_VBIOS_FCT_1X_ENTRY_PARAM5_VOLT_DELTA_MIN_SHIFT 0U


#define NV_VBIOS_FCT_1X_ENTRY_PARAM6_VOLT_DELTA_MAX_MASK U32(GENMASK(31, 0))
#define NV_VBIOS_FCT_1X_ENTRY_PARAM6_VOLT_DELTA_MAX_SHIFT 0U

#define NV_VBIOS_FCT_1X_ENTRY_PARAM7_FREQ_CAP_VF_MASK U32(GENMASK(15, 0))
#define NV_VBIOS_FCT_1X_ENTRY_PARAM7_FREQ_CAP_VF_SHIFT 0U
#define NV_VBIOS_FCT_1X_ENTRY_PARAM7_FREQ_CAP_VMIN_MASK U32(GENMASK(31, 16))
#define NV_VBIOS_FCT_1X_ENTRY_PARAM7_FREQ_CAP_VMIN_SHIFT 16U

#define NV_VBIOS_FCT_1X_ENTRY_PARAM8_FREQ_HYST_POS_MASK U32(GENMASK(15, 0))
#define NV_VBIOS_FCT_1X_ENTRY_PARAM8_FREQ_HYST_POS_SHIFT 0U
#define NV_VBIOS_FCT_1X_ENTRY_PARAM8_FREQ_HYST_NEG_MASK U32(GENMASK(31, 16))
#define NV_VBIOS_FCT_1X_ENTRY_PARAM8_FREQ_HYST_NEG_SHIFT 16U

/* LPWR Index Table */
struct nvgpu_bios_lpwr_idx_table_1x_header {
	u8 version;
	u8 header_size;
	u8 entry_size;
	u8 entry_count;
	u16 base_sampling_period;
} __attribute__((packed));

struct nvgpu_bios_lpwr_idx_table_1x_entry {
	u8 pcie_idx;
	u8 gr_idx;
	u8 ms_idx;
	u8 di_idx;
	u8 gc6_idx;
} __attribute__((packed));

/* LPWR MS Table*/
struct nvgpu_bios_lpwr_ms_table_1x_header {
	u8 version;
	u8 header_size;
	u8 entry_size;
	u8 entry_count;
	u8 default_entry_idx;
	u16 idle_threshold_us;
} __attribute__((packed));

struct nvgpu_bios_lpwr_ms_table_1x_entry {
	u32 feautre_mask;
	u16 dynamic_current_logic;
	u16 dynamic_current_sram;
} __attribute__((packed));

#define NV_VBIOS_LPWR_MS_FEATURE_MASK_MS_MASK    U32(GENMASK(0, 0))
#define NV_VBIOS_LPWR_MS_FEATURE_MASK_MS_SHIFT    0U
#define NV_VBIOS_LPWR_MS_FEATURE_MASK_MS_SWASR_MASK    U32(GENMASK(2, 2))
#define NV_VBIOS_LPWR_MS_FEATURE_MASK_MS_SWASR_SHIFT    2U
#define NV_VBIOS_LPWR_MS_FEATURE_MASK_MS_CLOCK_GATING_MASK    \
			U32(GENMASK(3, 3))
#define NV_VBIOS_LPWR_MS_FEATURE_MASK_MS_CLOCK_GATING_SHIFT    3U
#define NV_VBIOS_LPWR_MS_FEATURE_MASK_MS_RPPG_MASK    U32(GENMASK(5, 5))
#define NV_VBIOS_LPWR_MS_FEATURE_MASK_MS_RPPG_SHIFT    5U

/* LPWR GR Table */
struct nvgpu_bios_lpwr_gr_table_1x_header {
	u8 version;
	u8 header_size;
	u8 entry_size;
	u8 entry_count;
	u8 default_entry_idx;
	u16 idle_threshold_us;
	u8 adaptive_gr_multiplier;
} __attribute__((packed));

struct nvgpu_bios_lpwr_gr_table_1x_entry {
	u32 feautre_mask;
} __attribute__((packed));

#define NV_VBIOS_LPWR_GR_FEATURE_MASK_GR_MASK U32(GENMASK(0, 0))
#define NV_VBIOS_LPWR_GR_FEATURE_MASK_GR_SHIFT 0U

#define NV_VBIOS_LPWR_GR_FEATURE_MASK_GR_RPPG_MASK U32(GENMASK(4, 4))
#define NV_VBIOS_LPWR_GR_FEATURE_MASK_GR_RPPG_SHIFT 4U

#define VBIOS_LPWR_NVLINK_TABLE_HDR_INITPLL_ORDINAL_MASK		0x07U
#define VBIOS_LPWR_NVLINK_TABLE_HDR_INITPLL_ORDINAL_SHIFT		0x00U

#define BIT_HEADER_ID                           0xb8ffU
#define BIT_HEADER_SIGNATURE                    0x00544942U
#define PCI_EXP_ROM_SIG                         0xaa55U
#define PCI_EXP_ROM_SIG_NV                      0x4e56U

#define INIT_DONE                               0x71U
#define INIT_RESUME                             0x72U
#define INIT_CONDITION                          0x75U
#define INIT_XMEMSEL_ZM_NV_REG_ARRAY            0x8fU

#define PCI_ROM_IMAGE_BLOCK_SIZE                512U
#define PCI_DATA_STRUCTURE_CODE_TYPE_VBIOS_BASE 0x00U
#define PCI_DATA_STRUCTURE_CODE_TYPE_VBIOS_UEFI 0x03U

struct bios_bit {
	u16 id;
	u32 signature;
	u16 bcd_version;
	u8 header_size;
	u8 token_size;
	u8 token_entries;
	u8 header_checksum;
} __attribute__((packed));

#define TOKEN_ID_BIOSDATA                       0x42U
#define TOKEN_ID_NVINIT_PTRS                    0x49U
#define TOKEN_ID_FALCON_DATA                    0x70U
#define TOKEN_ID_PERF_PTRS                      0x50U
#define TOKEN_ID_CLOCK_PTRS                     0x43U
#define TOKEN_ID_VIRT_PTRS                      0x56U
#define TOKEN_ID_MEMORY_PTRS                    0x4DU
#define TOKEN_ID_BIOS_BOARD_ID_PTRS             0x69U
#define MEMORY_PTRS_V1                          1U
#define MEMORY_PTRS_V2                          2U

struct memory_ptrs_v1 {
	u8 rsvd0[2];
	u8 mem_strap_data_count;
	u16 mem_strap_xlat_tbl_ptr;
	u8 rsvd1[8];
} __attribute__((packed));

struct memory_ptrs_v2 {
	u8 mem_strap_data_count;
	u16 mem_strap_xlat_tbl_ptr;
	u8 rsvd[14];
} __attribute__((packed));

struct biosdata {
	u32 version;
	u8 oem_version;
	u8 checksum;
	u16 int15callbackspost;
	u16 int16callbackssystem;
	u16 boardid;
	u16 framecount;
	u8 biosmoddate[8];
} __attribute__((packed));

struct nvinit_ptrs {
	u16 initscript_table_ptr;
	u16 macro_index_table_ptr;
	u16 macro_table_ptr;
	u16 condition_table_ptr;
	u16 io_condition_table_ptr;
	u16 io_flag_condition_table_ptr;
	u16 init_function_table_ptr;
	u16 vbios_private_table_ptr;
	u16 data_arrays_table_ptr;
	u16 pcie_settings_script_ptr;
	u16 devinit_tables_ptr;
	u16 devinit_tables_size;
	u16 bootscripts_ptr;
	u16 bootscripts_size;
	u16 nvlink_config_data_ptr;
} __attribute__((packed));

struct falcon_data_v2 {
	u32 falcon_ucode_table_ptr;
} __attribute__((packed));

struct falcon_ucode_table_hdr_v1 {
	u8 version;
	u8 header_size;
	u8 entry_size;
	u8 entry_count;
	u8 desc_version;
	u8 desc_size;
} __attribute__((packed));

struct falcon_ucode_table_entry_v1 {
	u8 application_id;
	u8 target_id;
	u32 desc_ptr;
} __attribute__((packed));

#define TARGET_ID_PMU                           0x01U
#define APPLICATION_ID_DEVINIT                  0x04U
#define APPLICATION_ID_PRE_OS                   0x01U

#define FALCON_UCODE_FLAGS_VERSION_AVAILABLE    0x1U
#define FALCON_UCODE_IS_VERSION_AVAILABLE(hdr)           \
	(((hdr).v2.v_desc & FALCON_UCODE_FLAGS_VERSION_AVAILABLE) == \
	FALCON_UCODE_FLAGS_VERSION_AVAILABLE)

/*
 * version is embedded in bits 8:15 of the header on version 2+
 * and the header length in bits 16:31
 */

#define FALCON_UCODE_GET_VERSION(hdr) \
	U8(((hdr).v2.v_desc >> 8) & 0xffU)

#define FALCON_UCODE_GET_DESC_SIZE(hdr) \
	U16(((hdr).v2.v_desc >> 16) & 0xffffU)

struct falcon_ucode_desc_v1 {
	union {
		u32 v_desc;
		u32 stored_size;
	} hdr_size;
	u32 uncompressed_size;
	u32 virtual_entry;
	u32 interface_offset;
	u32 imem_phys_base;
	u32 imem_load_size;
	u32 imem_virt_base;
	u32 imem_sec_base;
	u32 imem_sec_size;
	u32 dmem_offset;
	u32 dmem_phys_base;
	u32 dmem_load_size;
} __attribute__((packed));

struct falcon_ucode_desc_v2 {
	u32 v_desc;
	u32 stored_size;
	u32 uncompressed_size;
	u32 virtual_entry;
	u32 interface_offset;
	u32 imem_phys_base;
	u32 imem_load_size;
	u32 imem_virt_base;
	u32 imem_sec_base;
	u32 imem_sec_size;
	u32 dmem_offset;
	u32 dmem_phys_base;
	u32 dmem_load_size;
	u32 alt_imem_load_size;
	u32 alt_dmem_load_size;
} __attribute__((packed));

union falcon_ucode_desc {
	struct falcon_ucode_desc_v1 v1;
	struct falcon_ucode_desc_v2 v2;
};

struct application_interface_table_hdr_v1 {
	u8 version;
	u8 header_size;
	u8 entry_size;
	u8 entry_count;
} __attribute__((packed));

struct application_interface_entry_v1 {
	u32 id;
	u32 dmem_offset;
} __attribute__((packed));

#define APPINFO_ID_DEVINIT                      0x01U

#define APPINFO_ID_DEVINIT                      0x01U

struct devinit_engine_interface {
	u16 version;
	u16 size;
	u16 application_version;
	u16 application_features;
	u32 tables_phys_base;
	u32 tables_virt_base;
	u32 script_phys_base;
	u32 script_virt_base;
	u32 script_virt_entry;
	u16 script_size;
	u8 memory_strap_count;
	u8 reserved;
	u32 memory_information_table_virt_base;
	u32 empty_script_virt_base;
	u32 cond_table_virt_base;
	u32 io_cond_table_virt_base;
	u32 data_arrays_table_virt_base;
	u32 gpio_assignment_table_virt_base;
} __attribute__((packed));

struct pci_exp_rom {
	u16 sig;
	u8 reserved[0x16];
	u16 pci_data_struct_ptr;
	u32 size_of_block;
} __attribute__((packed));

struct pci_data_struct {
	u32 sig;
	u16 vendor_id;
	u16 device_id;
	u16 device_list_ptr;
	u16 pci_data_struct_len;
	u8 pci_data_struct_rev;
	u8 class_code[3];
	u16 image_len;
	u16 vendor_rom_rev;
	u8 code_type;
	u8 last_image;
	u16 max_runtime_image_len;
} __attribute__((packed));

struct pci_ext_data_struct {
	u32 sig;
	u16 nv_pci_data_ext_rev;
	u16 nv_pci_data_ext_len;
	u16 sub_image_len;
	u8 priv_last_image;
	u8 flags;
} __attribute__((packed));

struct bios_board_id {
	u8 padding[11];
	u16 board_id;
} __attribute__((packed));

struct nvgpu_bios_ucode {
	u8 *bootloader;
	u32 bootloader_phys_base;
	u32 bootloader_size;
	u8 *ucode;
	u32 phys_base;
	u32 size;
	u8 *dmem;
	u32 dmem_phys_base;
	u32 dmem_size;
	u32 code_entry_point;
};

struct nvgpu_bios {
	u32 vbios_version;
	u8 vbios_oem_version;
	u16 vbios_board_id;

	u8 *data;
	size_t size;

	struct nvgpu_bios_ucode devinit;
	struct nvgpu_bios_ucode preos;

	u8 *devinit_tables;
	u32 devinit_tables_size;
	u8 *bootscripts;
	u32 bootscripts_size;

	u8 mem_strap_data_count;
	u16 mem_strap_xlat_tbl_ptr;

	u32 condition_table_ptr;

	u32 devinit_tables_phys_base;
	u32 devinit_script_phys_base;

	struct bit_token *perf_token;
	struct bit_token *clock_token;
	struct bit_token *virt_token;
	u32 expansion_rom_offset;
	u32 base_rom_size;

	u32 nvlink_config_data_offset;
	int (*init)(struct gk20a *g);
	int (*verify_version)(struct gk20a *g);
	int (*preos_wait_for_halt)(struct gk20a *g);
	void (*preos_reload_check)(struct gk20a *g);
	int (*preos_bios)(struct gk20a *g);
	int (*verify_devinit)(struct gk20a *g);
	int (*devinit_bios)(struct gk20a *g);
};
int nvgpu_bios_devinit(struct gk20a *g, struct nvgpu_bios *bios);
int nvgpu_bios_preos_wait_for_halt(struct gk20a *g, struct nvgpu_bios *bios);
int nvgpu_bios_sw_init(struct gk20a *g);
void nvgpu_bios_sw_deinit(struct gk20a *g, struct nvgpu_bios *bios);
int nvgpu_bios_parse_rom(struct gk20a *g);
u8 nvgpu_bios_read_u8(struct gk20a *g, u32 offset);
s8 nvgpu_bios_read_s8(struct gk20a *g, u32 offset);
u16 nvgpu_bios_read_u16(struct gk20a *g, u32 offset);
u32 nvgpu_bios_read_u32(struct gk20a *g, u32 offset);
void *nvgpu_bios_get_perf_table_ptrs(struct gk20a *g,
		struct bit_token *ptoken, u8 table_id);
bool nvgpu_bios_check_dgpu(struct gk20a *g, u32 ver);
u32  nvgpu_bios_get_vbios_version(struct gk20a *g);
u8  nvgpu_bios_get_vbios_oem_version(struct gk20a *g);
struct bit_token *nvgpu_bios_get_bit_token(struct gk20a *g,
		u8 token_id);
bool nvgpu_bios_wait_for_init_done(struct gk20a *g);
#endif
